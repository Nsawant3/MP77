/**
 * A class that implements a basic binary tree storing integers.
 * <p>
 * You need to complete this class by adding methods to insert values, compute the minimum and
 * maximum, search for a value, and compute a value's depth in the tree and number of descendants.
 * You will also need to complete several constructors used during tree creation and value
 * insertion.
 * <p>
 * Our binary tree is an example of a <i>recursive data structure</i>, since each tree instance
 * refers to several other tree instances to complete the entire structure. As you might expect,
 * recursive algorithms are particularly useful on recursive data structures.
 *
 * @see <a href="https://cs125.cs.illinois.edu/MP/6/">MP6 Documentation</a>
 * @see <a href="https://en.wikipedia.org/wiki/Binary_tree">Binary Tree</a>
 */
public class Tree {

    /** Current node's parent. May be null if I'm the root of the tree. */
    private Tree parent;

    /** Current node's left child, or null if none. */
    private Tree left;

    /** Current node's left child, or null if none. */
    private Tree right;

    /** Current node's value. */
    private int value;


    //CONSTRUCTORS

    /**
     * Initialize a new binary tree.
     * @param setValue - value for the root of the tree
     *
     */
    Tree(final int setValue) {
        this.value = setValue;
        this.parent = null;
      //Initialize a new binary tree.
    }


    /**
     * Initialize a new binary tree node for an existing tree.
     * @param setValue - value for the root of the tree
     * @param setParent - the parent of this node
     */
    Tree(final int setValue, final Tree setParent) {
        this.value = setValue;
        this.parent = setParent;

        //Initialize a new binary tree node for an existing tree.
    }


    //METHODS


    /**
     * Return the depth of this node from the root of the tree.
     *
     * @return the depth of this node relative to the root
     */
    public int depth() {
        if (parent != null) {
            return 1 + parent.depth();
        } else {
            return 0;
        }
        //Return the depth of this node from the root of the tree.
    }




    /**
     * Return the number of nodes below this node in the tree.
     * @return the number of nodes below this node in the tree
     */
    public int descendants() {
        int totalDes = 0;
        if ((left == null && right == null)) {
            return 0;
        }
        if (left != null) {
            totalDes += 1 + left.descendants();
        //Return the number of nodes below this node in the tree.
        }
        if (right != null) {
            totalDes += 1 + right.descendants();
        }
        return totalDes;
    }



    /**
     * Insert a new value into the binary tree.
     *
     * @param newValue - the new value to insert
     * @return true if the value does not already
     * exist and is successfully inserted, false otherwise
     */
    public boolean insert(final int newValue) {
      //  if (newValue <= 0) {
      //      return false;
      //  } else {
            return insertAsRoot(newValue);
      //  }
        //return insertAsRoot(newValue);
        //Insert a new value into the binary tree.
    }

    /**
     * This assumes that the root will first call this method
     * and inserts by recursively finding and place to insert the leaf to the tree.
     * @param newValue The value of the new node to be added
     * @return whether or not the new node has been inserted
     */
    private boolean insertAsRoot(final int newValue) {
        if (newValue > value) {
            if (right != null) {
                return right.insertAsRoot(newValue);
            } else {
                right = new Tree(newValue, this);
                return true;
            }
        } else if (newValue < value) {
            if (left != null) {
                return left.insertAsRoot(newValue);
            } else {
                left = new Tree(newValue, this);
                return true;
            }
        } else {
            return false;
        }
    }



    /**
     * Return the maximum value stored in this binary tree.
     * This function can assume it is called on the root node.
     * @return the maximum value stored in the tree.
     */
    public int maximum() {
        return maximum(getRoot());

    }


    /**
     * Gets the root from any point in the graph.
     * @return the root of the tree
     */
    public Tree getRoot() {
        if (parent != null) {
            return parent.getRoot();
        } else {
            return this;
        }
    }



    /**
     * Returns the maximum value of the tree starting from the root recursively.
     * @param root The root of the true
     * @return the maximum value of the tree
     */
    public int maximum(final Tree root) {
        if (left == null && right == null) {
            return value;
        } else if (left != null && right == null) {
            return Math.max(maximum(left), value);
        } else if (left == null && right != null) {
            return Math.max(maximum(right), value);
        } else {
            return Math.max(Math.max(maximum(right), maximum(left)), value);
        }
    }




    /**
     * Return the minimum value stored in this binary tree.
     * This function can assume it is called on the root node.
     * @return the minimum value stored in the tree.
     */
    public int minimum() {
        return minimum(getRoot());
    }


    /**
     * Returns the minimum value of the tree starting from the root recursively.
     * @param root The root of the true
     * @return the minimum value of the tree
     */
    public int minimum(final Tree root) {
        if (left == null && right == null) {
            return value;
        } else if (left != null && right == null) {
            return Math.min(minimum(left), value);
        } else if (left == null && right != null) {
            return Math.min(minimum(right), value);
        } else {
            return Math.min(Math.min(minimum(right), minimum(left)), value);
        }
    }






    /**
     * Search the binary tree for a specific value.
     * @param searchValue - this is the value searched for
     * @return Tree - the node containing the specified value,
     * or null if the value is not present in the tree
     */
    public Tree search(final int searchValue) {

        return parent;
        //Search the binary tree for a specific value.
    }

    /**
     * This goes from the top down recursively searches the tree to find the specific value.
     * @param searchValue the value we want to searched
     * @return Tree - the node with specific value or null if value is not present.
     */
    public Tree searchAsRoot(final int searchValue) {
        if (searchValue == value) {
            return this;
        } else if (value < searchValue && left != null) {
            return left.search(searchValue);
        } else if (value > searchValue && right != null) {
            return right.search(searchValue);
        } else {
            return null;
        }
    }

}
